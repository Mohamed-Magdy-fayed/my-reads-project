{"version":3,"sources":["BooksAPI.js","Selector.js","Book.js","Search.js","Shelf.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","selector","_ref","toUpdateBooks","isInSearch","updateSearch","react_default","a","createElement","className","onChange","e","target","value","BooksAPI","defaultValue","disabled","class","href","infoLink","style","width","height","backgroundImage","imageLinks","thumbnail","Selector","title","authors","search","toSetResults","_useState","useState","_useState2","slicedToArray","query","setQuery","_useState3","_useState4","searchResults","setSearchResults","getSearchResults","error","forEach","bookId","newBook","toConsumableArray","useEffect","react_router_dom","to","type","placeholder","map","result","key","Book","shelfName","name","shelfBooks","filter","BooksApp","state","updateBooks","_this","setState","console","log","this","react_router","path","element","Search","exact","Shelf","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.efb5f69f.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport * as BooksAPI from './BooksAPI'\r\n\r\nconst selector = ({ book, toUpdateBooks, isInSearch }) => {\r\n\r\n    const changeShelf = (shelf) => {\r\n        if (isInSearch) {\r\n            updateSearch(shelf)\r\n            BooksAPI.update(book, shelf)\r\n            .then(() => {toUpdateBooks()})\r\n        } else {\r\n            BooksAPI.update(book, shelf)\r\n            .then(() => {toUpdateBooks()})\r\n        }\r\n    }\r\n\r\n    const updateSearch = (shelf) => {\r\n        book.shelf = shelf\r\n    }\r\n\r\n    return (\r\n        <div className=\"book-shelf-changer\">\r\n            <select onChange={(e) => {\r\n                changeShelf(e.target.value)\r\n            }} defaultValue={book.shelf ? book.shelf : 'none'}>\r\n                <option value=\"move\" disabled>Move to...</option>\r\n                <option value=\"currentlyReading\">Currently Reading</option>\r\n                <option value=\"wantToRead\">Want to Read</option>\r\n                <option value=\"read\">Read</option>\r\n                <option value=\"none\">None</option>\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nselector.propTypes = {\r\n    book: PropTypes.object,\r\n}\r\n\r\nexport default selector\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Selector from './Selector'\r\n\r\nconst book = ({ book, toUpdateBooks, isInSearch }) => {\r\n\r\n    return (\r\n        <div class=\"book-frame\">\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    <a href={book.infoLink} target='_blank'>\r\n                        <div\r\n                            className=\"book-cover\"\r\n                            style={{\r\n                                width: 128, height: 193,\r\n                                backgroundImage: `url('${book.imageLinks && book.imageLinks.thumbnail}')`\r\n                            }}>\r\n                        </div>\r\n                    </a>\r\n                    <Selector isInSearch={isInSearch} toUpdateBooks={toUpdateBooks} book={book} />\r\n                </div>\r\n                <div class=\"book-info\">\r\n                    <div className=\"book-title\">{book.title}</div>\r\n                    <div className=\"book-authors\">{book.authors && book.authors[0]} <br /> {book.authors && book.authors[1]}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nbook.propTypes = {\r\n    book: PropTypes.object,\r\n}\r\n\r\nexport default book\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport Book from './Book'\r\n\r\n\r\nconst search = ({ toUpdateBooks }) => {\r\n\r\n    let toSetResults = []\r\n    const [query, setQuery] = useState('')\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const getSearchResults = (query) => {\r\n        if (query === '') {\r\n            setSearchResults([])\r\n        }\r\n        BooksAPI.search(query)\r\n            .then((books) => {\r\n                if (books && books.error) {\r\n                    setSearchResults([])\r\n                    return\r\n                }\r\n                books && books.forEach((book) => {\r\n                    BooksAPI.get(book.id)\r\n                        .then(newBook => {\r\n                            toSetResults = [...toSetResults, newBook]\r\n                        })\r\n                        .then(() => setSearchResults(toSetResults))\r\n                })\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSearchResults(query)\r\n    }, [query])\r\n\r\n\r\n    return (\r\n        <div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n                <Link to='/'><button className='close-search'>Close</button></Link>\r\n                <div className=\"search-books-input-wrapper\">\r\n                    <input\r\n                        onChange={(e) => {\r\n                            setQuery(e.target.value)\r\n                        }}\r\n                        value={query}\r\n                        type=\"text\"\r\n                        placeholder=\"Search by title or author\" />\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n                <ol className=\"books-grid\">\r\n                    {searchResults && (\r\n                        searchResults.map(result => (\r\n                            <li key={result.id}>\r\n                                <Book isInSearch={true} toUpdateBooks={toUpdateBooks} book={result} />\r\n                            </li>\r\n                        ))\r\n                    )}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default search\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Book from './Book'\r\n\r\nconst shelf = ({ shelfName, name, books, toUpdateBooks }) => {\r\n\r\n    let shelfBooks = books.filter(book => book.shelf === shelfName)\r\n\r\n    return (\r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">{name}</h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    {shelfBooks.map(book => (\r\n                        <li key={book.id}>\r\n                            <Book toUpdateBooks={toUpdateBooks} book={book} />\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nshelf.propTypes = {\r\n    shelfName: PropTypes.string,\r\n    name: PropTypes.string,\r\n    books: PropTypes.array,\r\n}\r\n\r\nexport default shelf\r\n","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport Search from './Search'\r\nimport Shelf from './Shelf'\r\nimport { Route, Routes, Link } from 'react-router-dom'\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    books: [],\r\n  }\r\n\r\n  updateBooks = () => {\r\n    BooksAPI.getAll()\r\n      .then((books) => {\r\n        this.setState(() => ({\r\n          books\r\n        }))\r\n        console.log(this.state.books);\r\n      })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateBooks()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Routes>\r\n          <Route path='/search' element={(\r\n            <Search toUpdateBooks={this.updateBooks} />\r\n          )} />\r\n\r\n          <Route exact path='/' element={(\r\n            <div className=\"list-books\">\r\n              <div className=\"list-books-title\">\r\n                <h1>MyReads</h1>\r\n              </div>\r\n              <div className=\"list-books-content\">\r\n                <div>\r\n                  <Shelf toUpdateBooks={this.updateBooks} shelfName='currentlyReading' name='Currently Reading' books={this.state.books} />\r\n                  <Shelf toUpdateBooks={this.updateBooks} shelfName='wantToRead' name='Want To Read' books={this.state.books} />\r\n                  <Shelf toUpdateBooks={this.updateBooks} shelfName='read' name='Read' books={this.state.books} />\r\n                </div>\r\n              </div>\r\n              <div className=\"open-search\">\r\n                <Link to='/search'><button>Add a book</button></Link>\r\n              </div>\r\n            </div>\r\n          )} />\r\n        </Routes>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>, document.getElementById('root'))\r\n"],"sourceRoot":""}